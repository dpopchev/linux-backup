#!/usr/bin/env bash
set -euo pipefail

TARGET=${TARGET:=/backup/target/path}
BACKUPS=${BACKUPS:=/snapshot/destination/path}
RESTORED="RESTORED_BACKUP"
RUNTIME_DIR=${XDG_RUNTIME_DIR:=${HOME}}

usage() {
    cat << HELPMSG
Usage: $(basename $0) [--restore]

Invoke without arguments to backup by updating a snpshot tree.

To restore backup invoke with --restore flag.

Update target: $TARGET
Destination:   $BACKUPS
HELPMSG
}

backup_options() {
    local -a options
    options+=("--archive")
    options+=("--update")
    options+=("--delete")
    options+=("--partial")
    options+=("--partial-dir=$RUNTIME_DIR/backup-partial")
    options+=("--info=progress2" "-v")
    options+=("--xattrs")
    options+=("--acls")
    options+=("--human-readable")
    options+=("--stats")
    options+=("--checksum")
    options+=("--mkpath")
    options+=("--log-file=$RUNTIME_DIR/backup.log")

    local IFS=\ ; echo "${options[*]}"
}

restore_options() {
    local -a options
    options+=("--archive")
    options+=("--partial")
    options+=("--partial-dir=$RUNTIME_DIR/restore-partial")
    options+=("--info=progress2" "-v")
    options+=("--xattrs")
    options+=("--acls")
    options+=("--human-readable")
    options+=("--stats")
    options+=("--mkpath")
    options+=("--log-file=$RUNTIME_DIR/backup-restore.log")

    local IFS=\ ; echo "${options[*]}"
}

remove_trailling_slashes() {
    local r="$1"
    case "$r" in
        /) r="/" ;;
        */) r="${r%/}" ;;
    esac
    echo $r
}

append_trailling_slash() {
    if [[ -d "$1" ]]; then
        echo "$1/"
        return
    fi
    echo "$1"
}

make_backup() {
    local -r src=$(append_trailling_slash $(remove_trailling_slashes "$1"))
    local -r dst=$(remove_trailling_slashes "$2")

    rsync $(backup_options) "$src" "$dst"
}

restore_backup() {
    local -r latest=$(append_trailling_slash $(remove_trailling_slashes "$1"))
    local -r destination=$(remove_trailling_slashes "$2")

    rsync $(restore_options) "$latest" "$destination"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    TARGET="${TARGET%/}"
    BACKUPS="${BACKUPS%/}"

    backup_path="$BACKUPS/$(basename $TARGET)"
    if [[ $# -eq 0 ]]; then
        make_backup "$TARGET" "$backup_path"
        exit 0
    fi

    should_restore="$1"; shift;
    if [[ $should_restore == --restore ]]; then
        restore_backup $backup_path/ $TARGET.$RESTORED
        exit 0
    fi
    usage
    exit 1
fi
