#!/usr/bin/env bash
set -o pipefail

LATEST_MARK="latest"
SCRIPT_NAME=$(basename "$0")
LOGFILE="${HOME}/.$SCRIPT_NAME.log"

usage() {
    cat << HELPMSG
$SCRIPT_NAME [OPTIONS]
-u/--ruser: remote user, defautl is the <USER> env variable
-h/--rhost: remote host name, default is localhost
-s/--src: the directory/file to make snapshot backup
-d/--dst-prefix: destination path prefix
-e/--exclude_from: pass list of exclusions to rsync as a file
--is-local: make a local snapshot, ruser and rhost not will ignored even when passed
--is-remote: make snapshot on remote server, ruser and rhost are needed
--is-dry-run: rsync trial run
-p/--passfile: passfile to use for connecting to host trough sshpass
-l/--logfile: logfile
HELPMSG
}

make_rsync_options() {
    local link_dest=${1:?expecting link_dest}; shift;
    local exclude_from is_dry_run is_remote logfile
    local "$@"

    local -a options

    if [[ -n $is_dry_run ]]; then
        options+=( --dry-run )
    fi

    # not supported by some servers; mkpath is done manually
    # options+=( --acls )
    # options+=( --mkpath )
    options+=( --archive )
    options+=( --xattrs )
    options+=( --delete )
    options+=( --human-readable )
    options+=( --stats )
    options+=( --link-dest="$link_dest" )
    options+=( --log-file="$logfile" )
    options+=( --outbuf=L )
    options+=( --checksum )
    # out format characters: https://linux.die.net/man/5/rsyncd.conf
    options+=( --out-format='%o:%n:%i' )

    if [[ -n $exclude_from ]]; then
        options+=( --exclude-from "$exclude_from" )
    fi

    echo "${options[@]}"
}

make_snapshot_name() {
    date +%U-%A
}

notify_exit_status() {
    local exitcode="$1"
    local snapshot_target="$2"
    local logfile="$3"

    case $exitcode in
        0)
            notify-send "$SCRIPT_NAME: snapshot $snapshot_target created successfully"
            ;;
        *)
            notify-send "$SCRIPT_NAME: snapshot $snapshot_target failed with $exitcode, see $logfile"
            ;;
    esac
}

make_snapshot() {
    local -a options="$1"; shift;
    local target="$1"; shift;
    local snapshots="$1"; shift;
    local snapshot_name="$1"; shift;
    local is_remote="$1"; shift;
    local user host passfile
    local "$@"

    local -a rsync_cmd

    if [[ $is_remote == true ]]; then
        rsync_cmd+=( sshpass -f "$passfile" )
    fi

    rsync_cmd+=( rsync )
    rsync_cmd+=( "${options[@]}" )
    rsync_cmd+=( "$target" )

    if [[ $is_remote == true ]]; then
        rsync_cmd+=( "$user@$host:$snapshots/$snapshot_name")
        sshpass -f "$passfile" ssh "$user"@"$host" mkdir -p "$snapshots"
    fi

    if [[ $is_remote == false ]]; then
        rsync_cmd+=( "$snapshots"/"$snapshot_name" )
        mkdir -p "$snapshots"
    fi

    ${rsync_cmd[@]} | sed -nur -e '/^send|recv|del/{s/$/\x0/p}' \
                                     -e '/^Number of/H' \
                                     -e '/^Total( transferred)? file/H' \
                                     -e '/^File list transfer time/H' \
                                     -e '${x;s/^\n//;s/$/\x0/;p}' \
    | while IFS= read -r -d '' status; do
        notify-send "${status##$'\n'}";
    done

    return "$?"
}

make_last_link() {
    local snapshots="$1"; shift;
    local snapshot_name="$1"; shift;
    local is_remote="$1"; shift;
    local passfile user host
    local "$@"

    local -a lncmd
    lncmd=(ln --symbolic --force --no-dereference "$snapshot_name" "$LATEST_MARK")

    if [[ $is_remote == false ]]; then
        (cd "$snapshots" && "${lncmd[@]}")
    fi

    if [[ $is_remote == true ]]; then
        sshpass -f "$passfile" ssh "$user"@"$host" "cd $snapshots && ${lncmd[*]}"
    fi
}

main() {
    if [[ $# -eq 0 ]]; then
        usage
        exit 1
    fi

    local user=$USER
    local host='localhost'
    local logfile=$LOGFILE
    local dst_prefix exclude_from is_dry_run passfile
    local is_remote="false"

    while [[ $# -gt 0 ]]; do
        case "$1" in
            -u|--user) user="$2"; shift;;
            -h|--host) host="$2"; shift;;
            -d|--dst-prefix) dst_prefix="${2%/}"; shift;;
            -s|--src) src="$2"; shift;;
            -e|--exclude-from) exclude_from="$2"; shift;;
            -p|--passfile) passfile="$2"; shift;;
            --is-remote) is_remote=true;;
            --is-dry-run) is_dry_run=true;;
            -l|--logfile) logfile="$2"; shift;;
            *) echo "Unknown option $1"; exit 1;;
        esac
        shift
    done

    if [[ $is_remote == true ]]; then
        [[ -z $user ]] && echo 'missing user' && exit 1
        [[ -z $host ]] && echo 'missing host' && exit 1
        [[ ! -e $passfile ]] && echo 'missing passfile' && exit 1
    fi

    local snapshots
    snapshots="$dst_prefix"/$(basename "$src")
    local snapshot_name
    snapshot_name=$(make_snapshot_name)
    local -a options
    options=$(make_rsync_options \
        ../"$LATEST_MARK" \
        is_dry_run="$is_dry_run" \
        exclude_from="$exclude_from" \
        is_remote="$is_remote" \
        passfile="$passfile" \
        logfile="$logfile"
    )

    notify-send "$SCRIPT_NAME: creating snapshot for $(basename $src)"

    make_snapshot "${options[@]}" "$src" "$snapshots" "$snapshot_name" \
        "$is_remote" \
        passfile="$passfile" \
        user="$user" \
        host="$host"

    notify_exit_status $? "$(basename "$src")" "$logfile"

    make_last_link "$snapshots" "$snapshot_name" "$is_remote" \
        passfile="$passfile" \
        user="$user" \
        host="$host"
}

main "$@"
exit 0
