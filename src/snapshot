#!/usr/bin/env bash
set -euo pipefail

TARGET=${TARGET:=/backup/target/path}
SNAPSHOTS=${SNAPSHOTS:=/snapshot/destination/path}
RESTORED="RESTORED_SNAPSHOT"
LOGFILE=${XDG_RUNTIME_DIR:=${HOME}}/snapshot.log
PARTIAL_DIR=".snapshot_partial"
LATEST="latest"

usage() {
    cat << HELPMSG
Usage: $(basename $0) [--restore]

Invoke without arguments to backup by updating a snpshot tree.

To restore latest snapshot invoke with --restore flag.

Update target: $TARGET
Destination:   $SNAPSHOTS
HELPMSG
}

remove_trailling_slashes() {
    local r="$1"
    case "$r" in
        /) r="/" ;;
        */) r="${r%/}" ;;
    esac
    echo $r
}

append_trailling_slash() {
    if [[ -d "$1" ]]; then
        echo "$1/"
        return
    fi
    echo "$1"
}

make_snapshot_name() {
    LC_TIME=C.UTF-8 date +%V-%a-%M
}

snapshot_options() {
    local -a options
    options+=("--archive")
    options+=("--update")
    options+=("--delete")
    options+=("--checksum")
    options+=("--xattrs" "--acls")
    options+=("--partial" "--partial-dir=$PARTIAL_DIR")
    options+=("--info=progress2" "-v")
    options+=("--stats" "--human-readable" "--log-file=$LOGFILE")
    options+=("--mkpath")
    options+=("--link-dest=../$LATEST")

    local IFS=\ ; echo "${options[*]}"
}

restore_options() {
    local -a options
    options+=("--archive")
    options+=("--partial" "--partial-dir=$PARTIAL_DIR")
    options+=("--info=progress2" "-v")
    options+=("--xattrs" "--acls")
    options+=("--stats" "--human-readable" "--log-file=$LOGFILE")
    options+=("--copy-links")
    options+=("--mkpath")

    local IFS=\ ; echo "${options[*]}"
}

make_snapshot() {
    local -r src=$(append_trailling_slash $(remove_trailling_slashes "$1"))
    local -r dst=$(remove_trailling_slashes "$2")

    rsync $(snapshot_options) "$src" "$dst"
}

mark_latest() {
    local -r target="$1"
    local -r latest="$2"
    ln -sf --no-dereference "$target" "$latest"
}

restore_latest() {
    local -r latest=$(append_trailling_slash $(remove_trailling_slashes "$1"))
    local -r destination=$(remove_trailling_slashes "$2")

    rsync $(restore_options) "$latest" "$destination"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    TARGET="${TARGET%/}"
    SNAPSHOTS="${SNAPSHOTS%/}"

    snapshot_path="$SNAPSHOTS/$(basename $TARGET)"
    if [[ $# -eq 0 ]]; then
        snapshot=$snapshot_path/$(make_snapshot_name)
        make_snapshot "$TARGET" "$snapshot"
        mark_latest "$snapshot" "$snapshot_path/$LATEST"
        exit 0
    fi

    should_restore="$1"; shift;
    if [[ $should_restore == --restore ]]; then
        restore_latest $snapshot_path/$LATEST $TARGET.$RESTORED
        exit 0
    fi
    usage
    exit 1
fi
